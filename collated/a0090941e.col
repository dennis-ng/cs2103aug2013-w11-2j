//@author: a0090941e



	/**
	 * origin: C:\Users\Shiyu\workspace\cs2103aug2013-w11-2j\src\typetodo\logic\CommandHelp.java
	 */

package typetodo.logic;

public class CommandHelp implements Command {
	private HelpController hc;

	public CommandHelp(HelpController hc) {
		this.hc = hc;
	}

	@Override
	public String execute() throws Exception {
		String feedback;
		feedback = hc.getFeedback();
		return feedback;
	}
}

	// End of segment: C:\Users\Shiyu\workspace\cs2103aug2013-w11-2j\src\typetodo\logic\CommandHelp.java





	/**
	 * origin: C:\Users\Shiyu\workspace\cs2103aug2013-w11-2j\src\typetodo\logic\CommandParser.java
	 */

package typetodo.logic;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.joda.time.DateTime;
import org.ocpsoft.prettytime.nlp.PrettyTimeParser;

import typetodo.exception.InvalidCommandException;
import typetodo.exception.InvalidDateTimeException;
import typetodo.exception.InvalidFieldNameException;
import typetodo.exception.InvalidFormatException;
import typetodo.exception.MissingFieldException;
import typetodo.exception.ReservedCharacterException;
import typetodo.model.FieldName;
import typetodo.model.TaskType;
import typetodo.sync.SyncController;

public class CommandParser {
	private Schedule schedule;
	private MainController sc;
	private SyncController syncController;
	private HelpController helpController;
	private CurrentTaskListManager taskListManager;

	private static final String MESSAGE_EXCEPTION_INVALID = "Invalid command, please refer to catalog by entering 'help'.";
	private static final String MESSAGE_EXCEPTION_MISSING_COLON = "Missing ';'";
	private static final String MESSAGE_EXCEPTION_MISSING_TITLE = "Title of task is missing, please refer to catalog by entering 'help'";
	private static final String MESSAGE_EXCEPTION_RESERVED_CHAR_DESCRIPTION = "';' is a reserved character and should not be found in the description";
	private static final String MESSAGE_EXCEPTION_RESERVED_CHAR_TITLE = "'+' is a reserved character and should not be found in the title";
	private static final String MESSAGE_EXCEPTION_MISSING_FIELDNAME = "Field Name is missing, please refer to catalog by entering 'help edit'";
	private static final String MESSAGE_EXCEPTION_MISSING_NEWVALUE = "New value is missing, please refer to catalog by entering 'help edit'";
	private static final String MESSAGE_EXCEPTION_DATETIME_FORMAT = "Please specify both date and time in all fields. Please use 'mm/dd' format if you want to type standard date.";
	private static final String MESSAGE_EXCEPTION_RESERVED_CHAR_1 = "'<' is a reserved character and cannot be used";
	private static final String MESSAGE_EXCEPTION_RESERVED_CHAR_2 = "'>' is a reserved character and cannot be used";
	private static final String MESSAGE_EXCEPTION_RESERVED_CHAR_3 = "'[' is a reserved character and cannot be used";
	private static final String MESSAGE_EXCEPTION_RESERVED_CHAR_4 = "']' is a reserved character and cannot be used";
	private static final String MESSAGE_EXCEPTION_INVALID_ADD = "INVALID FORMAT. Please refer to catalog by entering 'help add'";
	private static final String MESSAGE_EXCEPTION_INVALID_EDIT = "INVALID FORMAT. Please refer to catalog by entering 'help edit'";
	private static final String MESSAGE_EXCEPTION_INVALID_SEARCH = "INVALID FORMAT. Please refer to catalog by entering 'help search'";
	private static final String MESSAGE_EXCEPTION_INVALID_DISPLAY = "INVALID FORMAT. Please refer to catalog by entering 'help display'";
	private static final String MESSAGE_EXCEPTION_INVALID_DONE = "INVALID FORMAT. Please refer to catalog by entering 'help done'";

	public CommandParser(MainController sc, Schedule schedule,
			CurrentTaskListManager taskListManager,
			SyncController syncController, HelpController helpController) {
		this.sc = sc;
		this.schedule = schedule;
		this.taskListManager = taskListManager;
		this.syncController = syncController;
		this.helpController = helpController;
	}

	/**
	 * Extracts and returns the command from the user input.
	 * 
	 * @param userInput
	 *            A String containing the raw user input
	 * @return the command
	 * @throws InvalidCommandException
	 */
	private CommandType getCommand(String userInput)
			throws InvalidCommandException {

		Scanner scanner = new Scanner(userInput);
		// Extract the first string
		String command = scanner.next().toLowerCase();
		scanner.close();

		HashMap<CommandType, List<String>> commandSynonyms = new HashMap<CommandType, List<String>>();
		/** hard coded library of possible various user command inputs. */
		commandSynonyms.put(CommandType.ADD, Arrays.asList("add", "insert"));
		commandSynonyms.put(CommandType.DELETE,
				Arrays.asList("delete", "del", "de", "-", "remove"));
		commandSynonyms.put(CommandType.DONE, Arrays.asList("done", "finished",
				"finish", "completed", "complete"));
		commandSynonyms.put(CommandType.DISPLAY,
				Arrays.asList("display", "view", "show", "see", "list"));
		commandSynonyms.put(CommandType.HELP, Arrays.asList("help"));
		commandSynonyms.put(CommandType.HOME, Arrays.asList("home", "today"));
		commandSynonyms.put(CommandType.HOTKEY, Arrays.asList("hotkey",
				"quick", "hot key", "hotkeys", "hot", "short"));
		commandSynonyms.put(CommandType.UPDATE,
				Arrays.asList("update", "edit", "change"));
		commandSynonyms
				.put(CommandType.SEARCH, Arrays.asList("search", "find"));
		commandSynonyms.put(CommandType.UNDO, Arrays.asList("undo"));
		commandSynonyms.put(CommandType.EXIT, Arrays.asList("exit"));
		commandSynonyms.put(CommandType.SYNC, Arrays.asList("sync"));

		for (CommandType commandType : commandSynonyms.keySet()) {
			if (commandSynonyms.get(commandType).contains(command)) {
				return commandType;
			}
		}

		throw new InvalidCommandException(MESSAGE_EXCEPTION_INVALID);
	}

	private TaskType getTaskType(String userInput)
			throws InvalidCommandException {
		Scanner scanner = new Scanner(userInput);
		// Extract the taskType in view <task type>
		scanner.next();// throw command "view"
		String taskType = scanner.next().toLowerCase();
		scanner.close();

		HashMap<TaskType, List<String>> typeSynonyms = new HashMap<TaskType, List<String>>();
		/** hard coded library of possible various user command inputs. */
		typeSynonyms.put(TaskType.DEADLINE_TASK,
				Arrays.asList("deadline", "due"));
		typeSynonyms.put(TaskType.FLOATING_TASK,
				Arrays.asList("floating", "normal", "float"));
		typeSynonyms.put(TaskType.TIMED_TASK,
				Arrays.asList("timedtask", "timed", "slot"));

		for (TaskType type : typeSynonyms.keySet()) {
			if (typeSynonyms.get(type).contains(taskType)) {
				return type;
			}
		}

		throw new InvalidCommandException(MESSAGE_EXCEPTION_INVALID);
	}

	/**
	 * Extracts and returns the title from the user input.
	 * 
	 * @param userInput
	 *            A String containing the raw user input
	 * @return the title
	 * @throws InvalidFormatException
	 *             if user input does not have ';'
	 * @throws MissingFieldException
	 *             if user input does not contain a title
	 */
	private String getTitle(String userInput) throws InvalidFormatException,
			MissingFieldException, ReservedCharacterException {
		if (userInput.indexOf(';') == -1) {
			throw new InvalidFormatException(MESSAGE_EXCEPTION_MISSING_COLON);
		}

		Scanner scanner = new Scanner(userInput);
		scanner.next(); // throw user command;
		scanner.useDelimiter(";"); // title of task must always end with ";"
		String title = scanner.next().trim();
		scanner.close();

		if (title.equals("")) {
			throw new MissingFieldException(MESSAGE_EXCEPTION_MISSING_TITLE);
		} else if (title.contains("+")) {
			throw new ReservedCharacterException(
					MESSAGE_EXCEPTION_RESERVED_CHAR_TITLE);
		} else {
			assert title != "" && !title.contains("+") && !title.contains(";");
			return title.trim();
		}
	}

	/**
	 * Extracts and returns the description from the user input.
	 * 
	 * @param userInput
	 *            A String containing the raw user input
	 * @return the description
	 * @throws InvalidFormatException
	 *             if restricted char ';' is found in the description
	 */
	private String getDescription(String userInput)
			throws ReservedCharacterException {
		String description;
		int indexOfDescription = userInput.indexOf('+');

		// no description entered
		if (indexOfDescription == -1) {
			return "";
		}

		// description is empty
		else if (indexOfDescription == (userInput.length() - 1)) {
			return "";
		} else {
			description = userInput.substring(++indexOfDescription);
		}

		if (description.indexOf(';') != -1) {
			throw new ReservedCharacterException(
					MESSAGE_EXCEPTION_RESERVED_CHAR_DESCRIPTION);
		}

		return description.trim();
	}

	/**
	 * Extracts and returns the index from the user input.
	 * 
	 * @param userInput
	 *            A String containing the raw user input
	 * @return the index
	 */
	private int getIndex(String userInput) {
		Scanner scanner = new Scanner(userInput);
		scanner.next(); // throw the command
		int index = scanner.nextInt(); // next expected field is the index
		scanner.close();

		return index;
	}

	/**
	 * Extracts and returns the FieldName from the user input.
	 * 
	 * @param userInput
	 *            Raw user input
	 * @return the Field Name
	 * @throws InvalidFieldNameException
	 *             if field name is invalid
	 * @throws MissingFieldException
	 *             if field name is missing
	 */
	private FieldName getFieldName(String userInput)
			throws InvalidFieldNameException, MissingFieldException {
		FieldName fieldName;
		Scanner scanner = new Scanner(userInput);
		scanner.next(); // discard the command
		scanner.nextInt(); // discard the index

		try {
			fieldName = this.convertToFieldName(scanner.next());
		} catch (NoSuchElementException e) {
			scanner.close();
			throw new MissingFieldException(MESSAGE_EXCEPTION_MISSING_FIELDNAME);
		}
		scanner.close();

		return fieldName;
	}

	/**
	 * Extracts and returns the new value from the user input. It can be an
	 * instance of either a String, DateTime or Boolean, depending on the field
	 * that is to be updated.
	 * 
	 * @param userInput
	 *            Raw user input
	 * @return the new value
	 * @throws Exception
	 */
	private Object getNewValue(String userInput) throws Exception {
		Scanner scanner = new Scanner(userInput);
		scanner.next(); // throw away command
		scanner.nextInt(); // throw away index
		scanner.next(); // throw away fieldName

		String newValue;
		try {
			newValue = scanner.nextLine().trim();
		} catch (NoSuchElementException e) {
			scanner.close();
			throw new MissingFieldException(MESSAGE_EXCEPTION_MISSING_NEWVALUE);
		}
		scanner.close();

		switch (this.getFieldName(userInput)) {
		case TITLE:
		case DESCRIPTION:
			return newValue;
		case START:
		case END:
		case DEADLINE:
			return new DateTime(this.getDates(userInput).get(0));
		default:
			assert this.getFieldName(userInput) != null;
		}

		return null;
	}

	private String getKeyword(String userInput) {
		String keyword = null;
		Scanner scanner = new Scanner(userInput);

		scanner.next(); // throw away command
		keyword = scanner.nextLine();// get keyword
		scanner.close();

		return keyword.trim();
	}

	private ArrayList<DateTime> getDates(String userInput) throws Exception {
		String dateField;
		Scanner scanner = new Scanner(userInput);
		scanner.next();// throw away command

		if (userInput.contains(";")) {
			scanner.useDelimiter(";");
			scanner.next();
			scanner.useDelimiter("\\+");
			dateField = scanner.next().substring(1).trim();
		} else if (this.getCommand(userInput).equals(CommandType.DISPLAY)) {
			dateField = scanner.nextLine().trim();
		} else {
			scanner.next();// throw away index
			scanner.next();// throw away fieldName
			dateField = scanner.nextLine().trim();
		}

		scanner.close();

		dateField = modifyDate(dateField);

		List<java.util.Date> javaDates = new PrettyTimeParser()
				.parse(dateField);
		ArrayList<DateTime> jodaDates = new ArrayList<DateTime>();

		while (!javaDates.isEmpty()) {
			DateTime validDates = new DateTime(javaDates.remove(0));
			jodaDates.add(validDates);
		}

		if ((dateField.contains(" to ") && jodaDates.size() == 1)
				|| jodaDates.size() == 0) {
			throw new InvalidDateTimeException(
					MESSAGE_EXCEPTION_DATETIME_FORMAT);
		}

		return jodaDates;
	}

	// modify parsed-in date time input into a system-readable one
	private String modifyDate(String dateInput) {
		String result, startAmPm, endAmPm;
		result = dateInput.toLowerCase().replaceAll("-", " to ");
		result = result.toLowerCase().replaceAll("tmr", "tomorrow");

		int indexOfTo = result.indexOf(" to ");
		if (indexOfTo != -1) {
			endAmPm = result.substring(result.trim().length() - 2)
					.toLowerCase().trim();
			startAmPm = result.substring(indexOfTo - 2, indexOfTo).trim()
					.toLowerCase();

			if (endAmPm.equals("pm")
					&& (!startAmPm.equals("am") || !startAmPm.equals("pm"))) {
				startAmPm = startAmPm + "pm";
			}
			result = result.substring(0, indexOfTo - 2) + " " + startAmPm
					+ result.substring(indexOfTo);
		}
		return result;
	}

	private String getHelpType(String userInput) throws InvalidCommandException {
		String helpType;
		Scanner scanner = new Scanner(userInput);
		scanner.next();// throw away command;

		if (scanner.hasNext()) {
			helpType = scanner.next();
		} else {
			helpType = "";
		}
		scanner.close();

		return helpType;
	}

	/**
	 * convert from string to FieldName and return FieldName.
	 * 
	 * @throws InvalidFieldNameException
	 */
	private FieldName convertToFieldName(String fnString)
			throws InvalidFieldNameException {
		HashMap<FieldName, List<String>> fieldNameSynonyms = new HashMap<FieldName, List<String>>();
		fieldNameSynonyms.put(FieldName.TITLE, Arrays.asList("NAME", "TITLE"));
		fieldNameSynonyms.put(FieldName.DESCRIPTION,
				Arrays.asList("DESCRIPTION", "DESC"));
		fieldNameSynonyms.put(FieldName.START, Arrays.asList("START"));
		fieldNameSynonyms.put(FieldName.END, Arrays.asList("END"));
		fieldNameSynonyms.put(FieldName.DEADLINE, Arrays.asList("DEADLINE"));

		for (FieldName fieldName : fieldNameSynonyms.keySet()) {
			if (fieldNameSynonyms.get(fieldName).contains(fnString)) {
				return fieldName;
			}
		}

		throw new InvalidFieldNameException(
				"\""
						+ fnString
						+ "\" is not a valid Field Name, please refer to catalog by entering 'help edit'");
	}

	private boolean isViewAll(String userInput) {
		Scanner scanner = new Scanner(userInput);
		scanner.next(); // discard user command
		if (scanner.hasNext()) {
			if (scanner.next().equals("all")) {
				scanner.close();
				return true;
			}
		}
		scanner.close();

		return false;
	}

	private void checkForReservedCharacters(String userInput)
			throws ReservedCharacterException {
		if (userInput.indexOf("<") != -1) {
			throw new ReservedCharacterException(
					MESSAGE_EXCEPTION_RESERVED_CHAR_1);
		}
		if (userInput.indexOf(">") != -1) {
			throw new ReservedCharacterException(
					MESSAGE_EXCEPTION_RESERVED_CHAR_2);
		}
		if (userInput.indexOf("[") != -1) {
			throw new ReservedCharacterException(
					MESSAGE_EXCEPTION_RESERVED_CHAR_3);
		}
		if (userInput.indexOf("]") != -1) {
			throw new ReservedCharacterException(
					MESSAGE_EXCEPTION_RESERVED_CHAR_4);
		}
	}

	/**
	 * 
	 * @param userInput
	 * @return
	 * @throws Exception
	 */
	public Command parse(String userInput) throws Exception {
		this.checkForReservedCharacters(userInput);

		Command command = null;
		switch (this.getCommand(userInput)) {

		case ADD:
			String title = this.getTitle(userInput);
			String description = this.getDescription(userInput);
			ArrayList<DateTime> dates = this.getDates(userInput);

			if (dates.isEmpty()) {
				command = new CommandAddTask(schedule, title, description);
			} else if (dates.size() == 1) {
				DateTime deadline = dates.get(0);
				command = new CommandAddTask(schedule, title, description,
						deadline);
			} else if (dates.size() == 2) {
				DateTime start = dates.get(0);
				DateTime end = dates.get(1);

				command = new CommandAddTask(schedule, title, description, start, end);
			} else {
				throw new InvalidFormatException(MESSAGE_EXCEPTION_INVALID_ADD);
			}
			break;

		case DELETE:
			int index = this.getIndex(userInput);
			command = new CommandDeleteTask(schedule, index);
			break;

		case UPDATE:
			int taskId = this.getIndex(userInput);
			FieldName fieldName = this.getFieldName(userInput);
			Object newValue = this.getNewValue(userInput);

			if (newValue instanceof String) {
				command = new CommandEditTask(schedule, taskId, fieldName,
						(String) newValue);
			} else if (newValue instanceof DateTime) {
				command = new CommandEditTask(schedule, taskId, fieldName,
						(DateTime) newValue);
			} else {
				throw new InvalidFormatException(MESSAGE_EXCEPTION_INVALID_EDIT);
			}
			break;

		case SEARCH:
			try {
				String keyword = this.getKeyword(userInput);
				command = new CommandSearch(taskListManager, keyword);
			} catch (Exception e) {
				throw new InvalidFormatException(MESSAGE_EXCEPTION_INVALID_SEARCH);
			}
			break;

		case DISPLAY:
			DateTime dateTime;
			TaskType taskType;

			if (this.isViewAll(userInput)) {
				command = new CommandView(taskListManager);
				break;
			}
			try {
				taskType = getTaskType(userInput);
				command = new CommandView(taskListManager,taskType);
			} catch (Exception e) {
				try {
					dateTime = this.getDates(userInput).get(0);
					System.out.println("task date: " + dateTime);
					command = new CommandView(taskListManager, dateTime);
				} catch (Exception ex) {
					throw new InvalidFormatException(MESSAGE_EXCEPTION_INVALID_DISPLAY);
				}
			}

			break;

		case DONE:
			try {
				int indexOfCompletedTask = this.getIndex(userInput);
				command = new CommandCompleted(schedule, indexOfCompletedTask);
			} catch (Exception e) {
				throw new InvalidFormatException(MESSAGE_EXCEPTION_INVALID_DONE);
			}
			break;

		case HOME:
			command = new CommandHome(taskListManager);
			break;

		case UNDO:
			command = new CommandUndo(sc);
			break;

		case HELP:
			String helpType = getHelpType(userInput);
			if (helpType != "") {
				CommandType commandType = getCommand(helpType);
				helpController = new HelpController(commandType);
				command = new CommandHelp(helpController);
			} else {
				helpController = new HelpController(helpType);
				command = new CommandHelp(helpController);
			}
			break;

		case EXIT:
			command = new CommandExit();
			break;

		case SYNC:
			command = new CommandSync(syncController);
			break;

		default:
			// TODO:
			throw new Error();
		}
		
		return command;
	}
	
	private static Logger logger = Logger.getLogger("ParserLogger");

	public void logParser() {
		logger.log(Level.INFO, "going to start processing");
		try {
			//TODO
		} catch (Exception e) {
			logger.log(Level.WARNING, "process error", e);
			logger.log(Level.INFO, "end of processing");
		}
	}
}
	// End of segment: C:\Users\Shiyu\workspace\cs2103aug2013-w11-2j\src\typetodo\logic\CommandParser.java





	/**
	 * origin: C:\Users\Shiyu\workspace\cs2103aug2013-w11-2j\src\typetodo\logic\DateTimeParserTest.java
	 */

package typetodo.logic;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;
import org.junit.Test;
import org.ocpsoft.prettytime.nlp.PrettyTimeParser;

import typetodo.exception.InvalidDateTimeException;

public class DateTimeParserTest {

	@Test
	public void testDateTime() throws Exception {

		 assertEquals("deadline tomorrow with full date/time",
		 "2013-11-12T04:00:00.000+08:00", getDates("tomorrow 4am"));
		 assertEquals("deadline in the past with full date/time",
		 "2013-11-08T13:00:00.000+08:00", getDates("3 days ago 1pm"));
		 assertEquals("deadline in the future with full date/time",
		 "2013-11-22T04:00:00.000+08:00", getDates("next Friday 4am"));
		 assertEquals("deadline with only time",
		 "2013-11-11T04:00:00.000+08:00", getDates("4am"));
		 assertEquals("deadline with day abbreviation",
		 "2013-11-12T01:00:00.000+08:00", getDates("tue 1am"));
		 assertEquals("deadline with month abbreviation",
		 "2013-12-08T04:00:00.000+08:00", getDates("8th dec 4am"));
		 assertEquals("deadline with abbreviation tmr",
		 "2013-11-12T04:00:00.000+08:00", getDates("tmr 4am"));
		 assertEquals("deadline with standard datetime mm/dd", "2014-01-13T04:00:00.000+08:00",getDates("1/13/2014 4am"));
		 
		
		 /**
		 * deadline with only date will give current time with respective
		 given
		 * date. but JUnit is hard to test since the operation to get system
		 * time will lag thus not exactly equal.
		 */
		
		 assertEquals("timed with full date/time start and end",
		 "2013-11-15T01:00:00.000+08:00|2013-11-15T02:00:00.000+08:00",
		 getDates("from friday 1am to friday 2am"));
		 assertEquals("timed with no from",
		 "2013-11-15T01:00:00.000+08:00|2013-11-15T02:00:00.000+08:00",
		 getDates("friday 1am to friday 2am"));
		 assertEquals("timed with -",
		 "2013-11-15T01:00:00.000+08:00|2013-11-15T02:00:00.000+08:00",
		 getDates("friday 1am-friday 2am"));
		 assertEquals("timed with no am/pm 1",
		 "2013-11-15T01:00:00.000+08:00|2013-11-15T02:00:00.000+08:00",
		 getDates("friday 1-2"));
		 assertEquals("timed with no am/pm 2",
		 "2013-11-15T13:00:00.000+08:00|2013-11-15T14:00:00.000+08:00",
		 getDates("friday 13-14"));
		 assertEquals("timed with no am/pm 3",
		 "2013-11-15T13:00:00.000+08:00|2013-11-15T14:00:00.000+08:00",
		 getDates("friday 1-2pm"));
	}

	@Test(expected = InvalidDateTimeException.class)
	public void testDateTimeException() throws Exception{
		getDates("this is a test string.");
		getDates("1-2 friday");
	}
	
	private String getDates(String dateInput) throws Exception {
		String dateField;
		String result = "";
		dateField = modifyDate(dateInput);

		List<java.util.Date> javaDates = new PrettyTimeParser()
				.parse(dateField);
		ArrayList<DateTime> jodaDates = new ArrayList<DateTime>();

		while (!javaDates.isEmpty()) {
			DateTime validDates = new DateTime(javaDates.remove(0));
			jodaDates.add(validDates);
		}

		if (dateField.contains(" to ") && jodaDates.size() == 1) {
			throw new InvalidDateTimeException(
					"Please specify both date and time in all fields. Please use 'mm/dd' format if you want to type standard date.");
		} else {
			if (jodaDates.size() == 1) {
				result = jodaDates.get(0).toString();
			} else if (jodaDates.size() == 2) {
				result = jodaDates.get(0).toString() + "|"
						+ jodaDates.get(1).toString();
			} else {
			    assert jodaDates.size() != 1 || jodaDates.size() != 2;
				throw new InvalidDateTimeException(
						"Please specify both date and time in all fields. Please use 'dd/mm' format if you want to type standard date.");
			}
		}
		System.out.println("result: "+result);
		return result;
	}

	private String modifyDate(String dateInput) {
		String result, startAmPm, endAmPm;
		result = dateInput.toLowerCase().replaceAll("-", " to ");
		result = result.toLowerCase().replaceAll("tmr", "tomorrow");

		int indexOfTo = result.indexOf(" to ");
		if (indexOfTo != -1) {
			endAmPm = result.substring(result.trim().length() - 2)
					.toLowerCase().trim();
			startAmPm = result.substring(indexOfTo - 2, indexOfTo).trim()
					.toLowerCase();

			if (endAmPm.equals("pm")
					&& (!startAmPm.equals("am") || !startAmPm.equals("pm"))) {
				startAmPm = startAmPm + "pm";
			}
			result = result.substring(0, indexOfTo - 2) + " " + startAmPm
					+ result.substring(indexOfTo);
		}

		return result;
	}

}

	// End of segment: C:\Users\Shiyu\workspace\cs2103aug2013-w11-2j\src\typetodo\logic\DateTimeParserTest.java





	/**
	 * origin: C:\Users\Shiyu\workspace\cs2103aug2013-w11-2j\src\typetodo\logic\HelpController.java
	 */

package typetodo.logic;

public class HelpController {
	private String typeString;
	private CommandType helpType;

	//constructor for help with no specific helpType
	public HelpController(String typeString) {
		this.typeString = typeString;
	}

	//constructor for help with helpType
	public HelpController(CommandType helpType) {
		typeString = helpType.toString();
		this.helpType = helpType;
	}

	public String help(CommandType helpType) {
		switch (helpType) {
		case ADD:
			return HELP_ADD;
		case DELETE:
			return HELP_DELETE;
		case DONE:
			return HELP_DONE;
		case DISPLAY:
			return HELP_DISPLAY;
		case EXIT:
			return HELP_EXIT;
		case HOME:
			return HELP_HOME;
		case HOTKEY:
			return HELP_HOTKEY;
		case SEARCH:
			return HELP_SEARCH;
		case SYNC:
			return HELP_SYNC;
		case UNDO:
			return HELP_UNDO;
		case UPDATE:
			return HELP_UPDATE;
		default:
			return HELP_INSTRUCTION;
		}
	}

	public String getFeedback() {
		String feedback;
		if (typeString != "") {
			String thisHelp = help(helpType);
			feedback = thisHelp;
		} else {
			assert typeString == "";
			feedback = HELP_INSTRUCTION;
		}
		return feedback;
	}

	/** hard coded catalog*/
	private static final String HELP_INSTRUCTION = "Please enter 'help <command>'\n"
			+ "i.e.help hotkey, add, del, edit, undo, complete, search, sync, home, etc";
	private static final String HELP_ADD = "ADD:\n"
			+ "add <task title>; (optional) <time and date>\n"
			+ "*If you want to add description, you may type '+<description>' at the end of task";
	private static final String HELP_DELETE = "DELETE:\n"
			+ "(BY INDEX) del <index of task on current list>\n"
			+ "(BY KEYWORD) del <keyword of the task title>";
	private static final String HELP_DONE = "COMPLETE: (mark certain task is completed and remove from task list)\n"
			+ "(SYNTAX) done <index of task>";
	private static final String HELP_DISPLAY = "DISPLAY: (the default view is today's tasks)\n"
			+ "(SYNTAX) view <date> OR view <type> (Please do no use abbreviation.)";
	private static final String HELP_EXIT = "EXIT:(save and quit TypeToDo)\n"
			+ "(SYNTAX) exit";
	private static final String HELP_HOME = "HOME:(display default task list)\n"
			+ "(SYNTAX) home";
	private static final String HELP_SEARCH = "SEARCH:(find tasks that contain given keyword)\n"
			+ "(SYNTAX) search <keyword>";
	private static final String HELP_SYNC = "SYNC:(synchronize with google calendar. Either export typetodo tasks into GCal, or import editted GCal tasks)\n"
			+ "(SYNTAX) sync";
	private static final String HELP_UPDATE = "UPDATE:(modify exist task from typetodo. Note field name must be in capital letters,i.e.TITLE,DESCRIPTION,DEADLINE,START,END)\n"
			+ "(SYNTAX) edit <index of task on current list> <field name> <new value>";
	private static final String HELP_UNDO = "UNDO:\n" + "(SYNTAX) undo\n"
			+ "(HOTKEY) <ctrl> + <backspace>";
	private static final String HELP_HOTKEY = "HOT-KEYS:\n"
			+ "HIDE/RESTORE WINDOW: <ctrl> + <space>\n"
			+ "NAVIGATION MODE: <Esc>\n" + "INPUT MODE: <i> or <Enter>";
}

	// End of segment: C:\Users\Shiyu\workspace\cs2103aug2013-w11-2j\src\typetodo\logic\HelpController.java





